Exercícios de Programação Orientada a Objetos (POO) com Temas de Basquete

Exercício 1: Classe "Jogador"

Objetivo: Criar uma classe Jogador que representa um jogador de basquete.

Tarefas:

Definir a Classe Jogador:
Atributos:
nome (nome do jogador)
posicao (posição em quadra, como "Armador" ou "Ala")
pontos (número de pontos marcados)
Métodos:
marcarPonto() - Aumenta o número de pontos e exibe uma mensagem.
mudarPosicao(novaPosicao) - Altera a posição do jogador e exibe uma mensagem.
mostrarInfo() - Exibe as informações do jogador.
Exercício 2: Classe "Equipe"

Objetivo: Criar uma classe Equipe para representar uma equipe de basquete.

Tarefas:

Definir a Classe Equipe:
Atributos:
nome (nome da equipe)
vitorias (número de vitórias)
derrotas (número de derrotas)
Métodos:
ganharJogo() - Aumenta o número de vitórias e exibe uma mensagem.
perderJogo() - Aumenta o número de derrotas e exibe uma mensagem.
mostrarStatus() - Exibe o status atual da equipe.
Exercício 3: Classe "Partida"

Objetivo: Criar uma classe Partida para representar uma partida de basquete.

Tarefas:

Definir a Classe Partida:
Atributos:
equipe1 (nome da primeira equipe)
equipe2 (nome da segunda equipe)
pontosEquipe1 (número de pontos da equipe 1)
pontosEquipe2 (número de pontos da equipe 2)
Métodos:
marcarPonto(equipe, pontos) - Adiciona pontos a uma das equipes e exibe uma mensagem.
mostrarResultado() - Exibe o resultado atual da partida.
Exercício 4: Classe "Arbitro"

Objetivo: Criar uma classe Arbitro para representar um árbitro de basquete.

Tarefas:

Definir a Classe Arbitro:
Atributos:
nome (nome do árbitro)
partidasArbitradas (número de partidas arbitradas)
Métodos:
apitarPartida() - Aumenta o número de partidas arbitradas e exibe uma mensagem.
mostrarInfo() - Exibe as informações do árbitro.
Exercício 5: Classe "Equipamento"

Objetivo: Criar uma classe Equipamento para representar equipamentos usados no basquete.

Tarefas:

Definir a Classe Equipamento:

A classe Equipamento tem como objetivo modelar um equipamento utilizado no basquete, seja um tênis, uma bola, ou outro acessório. Para isso, precisamos definir alguns atributos e métodos que permitem manipular e acessar as informações desse equipamento.

Atributos:

nome: Este atributo armazena o nome do equipamento. Pode ser algo como "Tênis de Basquete" ou "Bola de Basquete". É uma forma de identificar o equipamento de maneira única.
tipo: Este atributo especifica o tipo do equipamento, por exemplo, "Tênis" para calçados ou "Acessório" para itens como fitas ou joelheiras. Ele ajuda a classificar o equipamento em categorias.
estado: Este atributo indica o estado atual do equipamento, como "Novo" ou "Usado". É útil para saber se o equipamento está em boas condições ou se necessita de manutenção.
Métodos:

usar(): Este método simula o uso do equipamento. Quando chamado, ele exibe uma mensagem informando que o equipamento foi usado. É uma forma de registrar que o equipamento está sendo utilizado e, possivelmente, de alterar seu estado (não detalhado aqui, mas poderia ser incluído em uma implementação mais avançada).
manter(): Este método simula a manutenção do equipamento. Quando chamado, ele exibe uma mensagem indicando que o equipamento foi mantido. Isso pode incluir atividades como limpeza ou reparos.
mostrarInfo(): Este método exibe as informações do equipamento, mostrando o nome, tipo e estado. Isso permite que o usuário veja rapidamente as principais características do equipamento.
A classe Equipamento serve como um exemplo de como modelar entidades do mundo real em programação orientada a objetos. Os atributos permitem armazenar características do equipamento, enquanto os métodos fornecem ações que podem ser realizadas com ele.

Gabarito

Exercício 1: Classe "Jogador"

java
Copy code
// Definindo a classe Jogador
public class Jogador {
    // Atributos da classe Jogador
    String nome;
    String posicao;
    int pontos;

    // Método para marcar um ponto
    public void marcarPonto() {
        pontos++; // Aumenta o número de pontos
        System.out.println(nome + " marcou um ponto! Total de pontos: " + pontos);
    }

    // Método para mudar a posição do jogador
    public void mudarPosicao(String novaPosicao) {
        posicao = novaPosicao; // Atualiza a posição do jogador
        System.out.println(nome + " agora é " + posicao);
    }

    // Método para mostrar as informações do jogador
    public void mostrarInfo() {
        System.out.println("Nome: " + nome + ", Posição: " + posicao + ", Pontos: " + pontos);
    }
}
Exercício 2: Classe "Equipe"

java
Copy code
// Definindo a classe Equipe
public class Equipe {
    // Atributos da classe Equipe
    String nome;
    int vitorias;
    int derrotas;

    // Método para ganhar um jogo
    public void ganharJogo() {
        vitorias++; // Aumenta o número de vitórias
        System.out.println(nome + " ganhou um jogo! Total de vitórias: " + vitorias);
    }

    // Método para perder um jogo
    public void perderJogo() {
        derrotas++; // Aumenta o número de derrotas
        System.out.println(nome + " perdeu um jogo! Total de derrotas: " + derrotas);
    }

    // Método para mostrar o status da equipe
    public void mostrarStatus() {
        System.out.println("Equipe: " + nome + ", Vitórias: " + vitorias + ", Derrotas: " + derrotas);
    }
}
Exercício 3: Classe "Partida"

java
Copy code
// Definindo a classe Partida
public class Partida {
    // Atributos da classe Partida
    String equipe1;
    String equipe2;
    int pontosEquipe1;
    int pontosEquipe2;

    // Método para marcar pontos para uma das equipes
    public void marcarPonto(String equipe, int pontos) {
        if (equipe.equals(equipe1)) {
            pontosEquipe1 += pontos; // Adiciona pontos à equipe 1
        } else if (equipe.equals(equipe2)) {
            pontosEquipe2 += pontos; // Adiciona pontos à equipe 2
        }
        System.out.println("Pontos atualizados. " + equipe1 + ": " + pontosEquipe1 + " - " + equipe2 + ": " + pontosEquipe2);
    }

    // Método para mostrar o resultado da partida
    public void mostrarResultado() {
        System.out.println("Resultado da partida: " + equipe1 + " " + pontosEquipe1 + " - " + equipe2 + " " + pontosEquipe2);
    }
}
Exercício 4: Classe "Arbitro"

java
Copy code
// Definindo a classe Arbitro
public class Arbitro {
    // Atributos da classe Arbitro
    String nome;
    int partidasArbitradas;

    // Método para apitar uma partida
    public void apitarPartida() {
        partidasArbitradas++; // Aumenta o número de partidas arbitradas
        System.out.println(nome + " apitou uma partida! Total de partidas arbitradas: " + partidasArbitradas);
    }

    // Método para mostrar as informações do árbitro
    public void mostrarInfo() {
        System.out.println("Árbitro: " + nome + ", Partidas Arbitradas: " + partidasArbitradas);
    }
}
Exercício 5: Classe "Equipamento"

java
Copy code
// Definindo a classe Equipamento
public class Equipamento {
    // Atributos da classe Equipamento
    String nome;
    String
